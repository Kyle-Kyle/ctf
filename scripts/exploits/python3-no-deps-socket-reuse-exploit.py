#!/usr/bin/env python3

import socket
import sys

from argparse import (
    ArgumentParser,
    RawDescriptionHelpFormatter)
from functools import (
    partial)
from telnetlib import (
    Telnet)


EXPLOIT_NAME = 'FIXME'
EXPLOIT_USAGE = f'{EXPLOIT_NAME} [OPTIONS] <host> <port>'
EXPLOIT_DESCRIPTION = 'FIXME'

print_info = partial(print, '[*] ', sep='')
print_err = partial(print, '[!] ', sep='', file=sys.stderr)


def get_parsed_args(args=None):
    """Setup argparse for metadata and host/port arguments."""
    parser = ArgumentParser(
        prog=EXPLOIT_NAME,
        usage=EXPLOIT_USAGE,
        description=EXPLOIT_DESCRIPTION,
        formatter_class=RawDescriptionHelpFormatter)

    parser.add_argument(
        'host',
        metavar='host',
        help='IP address or domain name of target')

    parser.add_argument(
        'port',
        metavar='port',
        type=int,
        help='TCP port of target service')

    if args is None:
        args = sys.argv[1:]

    return parser.parse_args(args)


def sock_init(host, port):
    """Get a connected socket to the specified host/port."""
    try:
        sock = socket.create_connection((host, port))
    except Exception as e:
        print_err(f'Unable to open connection to {host} port {port}')
        print_err(e)
        sys.exit(1)

    return sock


def exploit(host, port):
    """Main exploit code, returning live socket to exploited service."""
    sock = sock_init(host, port)
    print_info(f'Successful connection to {host} port {port}')

    # FIXME: send your payload via sock.recv / sock.send

    return sock


def main():
    """Run the exploit and go interactive."""
    args = get_parsed_args()
    host = args.host
    port = int(args.port)

    sock = None
    t = None
    try:
        sock = exploit(host, port)
        t = Telnet()
        t.sock = sock
        print_info('Exploit sent, going interactive!')
        t.mt_interact()
    except ConnectionResetError:
        print_info('Remote host closed connection')
    except KeyboardInterrupt:
        print_info('Ctrl-C received! Quitting!')
    finally:
        if sock is not None:
            sock.close()

        if t is not None:
            t.close()

    return 0


if __name__ == '__main__':
    sys.exit(main())
